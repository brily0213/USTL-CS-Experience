//另一种方法,定义类。采用重量最轻者先装的贪心选择策略：
#define N 8
#define M 400
#include <iostream>
#include <algorithm>
using namespace std;
class Loadtype
{
public:
    int operator<=(Loadtype a) const
    {
        return (w<=a.w);
    }
    int w, index;
};
bool compare(Loadtype a, Loadtype b)      // sort使用
{
    return a.w<b.w;                 //降序排列，如果改为return a<b，则为升序
}
//另一种方法,定义类。采用重量最轻者先装的贪心选择策略： (接上页)
void Loading(int n, int w[],int x[])
{
    int t[N],i;
    Loadtype *d=new Loadtype[n];
    for (i=0; i<n; i++)
    {
        d[i].w=w[i];
        d[i].index=i;
    }
    sort(d, d+N, compare);
    for (i=0; i<n; i++)
    {
        x[i]=0;
        t[i]=d[i].index;
    }
    float c=M;
    for (i=0; i<n&&w[t[i]]<=c; i++)
    {
        x[t[i]]=1;
        c-=w[t[i]];
    }
    delete d;
}
int main()
{
    int w[N]= {100,200,50,90,150,50,20,80},x[N]= {0};
    Loading(N, w, x);
    for(int i=0; i<8; i++)
        cout<<x[i]<<"   ";
    return 0;
}

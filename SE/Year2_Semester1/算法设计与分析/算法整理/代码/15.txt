//矩阵连乘问题 求最优解

#include <iostream>
#define N 6
using namespace std;

void Traceback(int i, int j, int s[N+1][N+1]) //输出最优解--矩阵的计算次序
{
    if (i==j) return;
    Traceback(i, s[i][j],s);
    Traceback(s[i][j]+1, j,s);
    cout<<"A("<<i<<","<<s[i][j]<<") & A("<<s[i][j]+1<<","<<j<<")"<<endl;
}

void MatrixChain(int p[N+1], int n, int m[N+1][N+1], int s[N+1][N+1])
{
    for (int i = 1; i <= n; i++)
        m[i][i] = 0;
    for (int r = 2; r <= n; r++)
    {
        for (int i = 1; i <= n - r+1; i++)
        {
            int j=i+r-1;
            m[i][j] = m[i+1][j]+ p[i-1]*p[i]*p[j];
            s[i][j] = i;
            for (int k = i+1; k < j; k++)
            {
                int t = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
                if (t < m[i][j])
                {
                    m[i][j] = t;
                    s[i][j] = k;
                }
            }
        }
    }
}
int main()
{
    int p[N+1]= {30,35,15,5,10,20,25}, m[N+1][N+1]= {0}, s[N+1][N+1]= {0};
    MatrixChain(p,N,m,s);
    Traceback(1,N, s);
    return 0;
}
